generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

enum ROLE {
  USER
  ADMIN
}

enum OTPTYPE {
  EMAIL_VERIFICATION
  PASSWORD_RESET
}

enum USERTYPE {
  FREE
  PAID
}

enum REGISTRATIONTYPE {
  SSO
  DEFAULT
}

enum STATUSTYPE {
  COMPLETED
  ONGOING
  NOT_STARTED
}

enum IMPORTANCE {
  LOW
  MEDIUM
  HIGH
}

enum STANDARD {
  CLASS_ONE
  CLASS_TWO
  CLASS_THREE
  CLASS_FOUR
  CLASS_FIVE
  CLASS_SIX
  CLASS_SEVEN
  CLASS_EIGHT
  CLASS_NINE
  CLASS_TEN
  CLASS_ELEVEN
  CLASS_TWELVE
}

model User {
  id               String           @id @default(uuid()) @db.Uuid
  email            String           @unique
  phone            String?
  password         String?
  name             String
  userType         USERTYPE         @default(FREE)
  isVerified       Boolean          @default(false)
  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @updatedAt
  registrationType REGISTRATIONTYPE
  otp              OTP[]
  refreshToken     RefreshToken[]
}

model OTP {
  id String @id @default(uuid()) @db.Uuid

  otp    String
  expiry DateTime
  userId String   @map("user_id") @db.Uuid
  type   OTPTYPE  @default(EMAIL_VERIFICATION)
  isUsed Boolean  @default(false)
  user   User     @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, type])
}

model Admin {
  id           String         @id @default(uuid()) @db.Uuid
  email        String         @unique
  password     String
  isVerified   Boolean        @default(false)
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  refreshToken RefreshToken[]
}

model Quiz {
  id          String     @id @default(uuid()) @db.Uuid
  title       String
  description String?
  isPublished Boolean    @default(false)
  accessCode  String?
  questions   Question[]
}

model Question {
  id              String           @id @default(uuid()) @db.Uuid
  question        String
  options         QuestionOption[]
  correctOptionId String
  quiz            Quiz             @relation(fields: [quizId], references: [id], onDelete: Cascade)
  quizId          String           @map("quiz_id") @db.Uuid
}

model QuestionOption {
  id         String   @id @default(uuid()) @db.Uuid
  option     String
  isCorrect  Boolean
  question   Question @relation(fields: [questionId], references: [id], onDelete: Cascade)
  questionId String   @map("question_id") @db.Uuid
}

model RefreshToken {
  id          String   @id @default(uuid()) @db.Uuid
  tokenId     String   @unique
  tokenSecret String
  expiresAt   DateTime
  isRevoked   Boolean  @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  Admin     Admin?   @relation(fields: [adminId], references: [id])
  adminId   String?  @db.Uuid
  User      User?    @relation(fields: [userId], references: [id])
  userId    String?  @db.Uuid
}

// LATEST =========================================================================================

model Syllabus {
  id          Int      @id @default(autoincrement())
  name        String
  description String?
  year        Int?
  gradeLevels Json?
  language    String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  classes Class[]
}

model Class {
  id         Int     @id @default(autoincrement())
  name       String
  section    String?
  syllabusId Int

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  syllabus Syllabus  @relation(fields: [syllabusId], references: [id])
  subjects Subject[]
}

model Subject {
  id          Int      @id @default(autoincrement())
  name        String
  classId     Int
  teacherName String?
  code        String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  class    Class     @relation(fields: [classId], references: [id])
  chapters Chapter[]
}

model Chapter {
  id          Int      @id @default(autoincrement())
  title       String
  description String?
  term        String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  note        Note[]   @relation("chapter_notes")
  Subject     Subject? @relation(fields: [subjectId], references: [id])
  subjectId   Int?
}

model Note {
  id         String     @id @default(uuid()) @db.Uuid
  title      String
  content    String
  importance IMPORTANCE?
  chapterId  Int
  chapter    Chapter    @relation("chapter_notes", fields: [chapterId], references: [id])
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
}

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

enum ROLE {
  USER
  ADMIN
}

enum OTPTYPE {
  EMAIL_VERIFICATION
  PASSWORD_RESET
}

enum USERTYPE {
  FREE
  PAID
}

enum REGISTRATIONTYPE {
  SSO
  DEFAULT
}

enum STATUSTYPE {
  COMPLETED
  ONGOING
  NOT_STARTED
}

model User {
  id               String           @id @default(uuid()) @db.Uuid
  email            String           @unique
  phone            String?
  password         String?
  name             String
  userType         USERTYPE         @default(FREE)
  isVerified       Boolean          @default(false)
  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @updatedAt
  registrationType REGISTRATIONTYPE
  otp              OTP[]
}

model OTP {
  id String @id @default(uuid()) @db.Uuid

  otp    String
  expiry DateTime
  userId String   @map("user_id") @db.Uuid
  type   OTPTYPE  @default(EMAIL_VERIFICATION)
  isUsed Boolean  @default(false)
  user   User     @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, type])
}

model Admin {
  id         String   @id @default(uuid()) @db.Uuid
  email      String
  password   String
  isVerified Boolean
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

// model Quiz {
//   id          String          @id @default(uuid()) @db.Uuid
//   title       String
//   description String?
//   status      STATUSTYPE      @default(NOT_STARTED)
//   isPublished Boolean         @default(false)
//   createdAt   DateTime        @default(now())
//   updatedAt   DateTime        @updatedAt
//   admin       Admin           @relation(fields: [adminId], references: [id])
//   adminId     String          @db.Uuid
//   questions   Question[]
//   responses   QuizSubmition[]
//   User        User?           @relation(fields: [userId], references: [id])
//   userId      String?         @db.Uuid
// }

// model Question {
//   id              String           @id @default(uuid()) @db.Uuid
//   quiz            Quiz             @relation(fields: [quizId], references: [id], onDelete: Cascade)
//   quizId          String           @db.Uuid
//   question        String
//   options         QuestionOption[]
//   correctOptionId String
//   explanation     String
// }

// model QuestionOption {
//   id         String   @id @default(uuid()) @db.Uuid
//   question   Question @relation(fields: [questionId], references: [id], onDelete: Cascade)
//   questionId String   @map("question_id") @db.Uuid
//   option     String
//   isCorrect  Boolean  @map("is_correct")
// }

// model QuizSubmition {
//   id             String           @id @default(uuid()) @db.Uuid
//   quiz           Quiz             @relation(fields: [quizId], references: [id])
//   quizId         String           @db.Uuid
//   userId         String           @db.Uuid
//   email          String?
//   score          Int
//   totalQuestions Int              @map("total_questions")
//   startedAt      DateTime
//   submittedAt    DateTime
//   answers        QuestionAnswer[]
// }

// model QuestionAnswer {
//   id               String        @id @default(uuid()) @db.Uuid
//   quizResponse     QuizSubmition @relation(fields: [quizSubmissionId], references: [id], onDelete: Cascade)
//   quizSubmissionId String
//   questionId       String
//   selectedOptionId String
//   isCorrect        Boolean
// }

model Quiz {
  id          String     @id @default(uuid()) @db.Uuid
  title       String
  description String?
  isPublished Boolean    @default(false)
  accessCode  String?
  questions   Question[]
}

model Question {
  id              String           @id @default(uuid()) @db.Uuid
  question        String
  options         QuestionOption[]
  correctOptionId String
  quiz            Quiz             @relation(fields: [quizId], references: [id], onDelete: Cascade)
  quizId          String           @map("quiz_id") @db.Uuid
}

model QuestionOption {
  id         String   @id @default(uuid()) @db.Uuid
  option     String
  isCorrect  Boolean
  question   Question @relation(fields: [questionId], references: [id], onDelete: Cascade)
  questionId String   @map("question_id") @db.Uuid
}
